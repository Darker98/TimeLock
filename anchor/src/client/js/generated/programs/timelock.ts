/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedLockSolInstruction,
  type ParsedWithdrawSolInstruction,
} from '../instructions';

export const TIMELOCK_PROGRAM_ADDRESS =
  '81eTCSx3zoUi8Q2ewTPJgfiJk32AR1mXnSTj6BJ5aKa' as Address<'81eTCSx3zoUi8Q2ewTPJgfiJk32AR1mXnSTj6BJ5aKa'>;

export enum TimelockAccount {
  VaultPDA,
}

export function identifyTimelockAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TimelockAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([109, 182, 77, 81, 208, 30, 110, 107])
      ),
      0
    )
  ) {
    return TimelockAccount.VaultPDA;
  }
  throw new Error(
    'The provided account could not be identified as a timelock account.'
  );
}

export enum TimelockInstruction {
  LockSol,
  WithdrawSol,
}

export function identifyTimelockInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TimelockInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([181, 15, 15, 99, 159, 87, 241, 42])
      ),
      0
    )
  ) {
    return TimelockInstruction.LockSol;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 131, 74, 136, 65, 137, 42, 38])
      ),
      0
    )
  ) {
    return TimelockInstruction.WithdrawSol;
  }
  throw new Error(
    'The provided instruction could not be identified as a timelock instruction.'
  );
}

export type ParsedTimelockInstruction<
  TProgram extends string = '81eTCSx3zoUi8Q2ewTPJgfiJk32AR1mXnSTj6BJ5aKa',
> =
  | ({
      instructionType: TimelockInstruction.LockSol;
    } & ParsedLockSolInstruction<TProgram>)
  | ({
      instructionType: TimelockInstruction.WithdrawSol;
    } & ParsedWithdrawSolInstruction<TProgram>);
