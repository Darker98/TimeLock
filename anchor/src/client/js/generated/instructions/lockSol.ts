/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TIMELOCK_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const LOCK_SOL_DISCRIMINATOR = new Uint8Array([
  181, 15, 15, 99, 159, 87, 241, 42,
]);

export function getLockSolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LOCK_SOL_DISCRIMINATOR);
}

export type LockSolInstruction<
  TProgram extends string = typeof TIMELOCK_PROGRAM_ADDRESS,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountVaultPda extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountVaultPda extends string
        ? WritableAccount<TAccountVaultPda>
        : TAccountVaultPda,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type LockSolInstructionData = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
  lockedAmount: bigint;
  unlockAt: bigint;
};

export type LockSolInstructionDataArgs = {
  seed: number | bigint;
  lockedAmount: number | bigint;
  unlockAt: number | bigint;
};

export function getLockSolInstructionDataEncoder(): FixedSizeEncoder<LockSolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU64Encoder()],
      ['lockedAmount', getU64Encoder()],
      ['unlockAt', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LOCK_SOL_DISCRIMINATOR })
  );
}

export function getLockSolInstructionDataDecoder(): FixedSizeDecoder<LockSolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU64Decoder()],
    ['lockedAmount', getU64Decoder()],
    ['unlockAt', getI64Decoder()],
  ]);
}

export function getLockSolInstructionDataCodec(): FixedSizeCodec<
  LockSolInstructionDataArgs,
  LockSolInstructionData
> {
  return combineCodec(
    getLockSolInstructionDataEncoder(),
    getLockSolInstructionDataDecoder()
  );
}

export type LockSolAsyncInput<
  TAccountUser extends string = string,
  TAccountVaultPda extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  vaultPda?: Address<TAccountVaultPda>;
  vault?: Address<TAccountVault>;
  systemProgram?: Address<TAccountSystemProgram>;
  seed: LockSolInstructionDataArgs['seed'];
  lockedAmount: LockSolInstructionDataArgs['lockedAmount'];
  unlockAt: LockSolInstructionDataArgs['unlockAt'];
};

export async function getLockSolInstructionAsync<
  TAccountUser extends string,
  TAccountVaultPda extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TIMELOCK_PROGRAM_ADDRESS,
>(
  input: LockSolAsyncInput<
    TAccountUser,
    TAccountVaultPda,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  LockSolInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountVaultPda,
    TAccountVault,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TIMELOCK_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    vaultPda: { value: input.vaultPda ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vaultPda.value) {
    accounts.vaultPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 100, 97])),
        getU64Encoder().encode(expectSome(args.seed)),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.vaultPda.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.vaultPda),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getLockSolInstructionDataEncoder().encode(
      args as LockSolInstructionDataArgs
    ),
  } as LockSolInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountVaultPda,
    TAccountVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type LockSolInput<
  TAccountUser extends string = string,
  TAccountVaultPda extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  vaultPda: Address<TAccountVaultPda>;
  vault: Address<TAccountVault>;
  systemProgram?: Address<TAccountSystemProgram>;
  seed: LockSolInstructionDataArgs['seed'];
  lockedAmount: LockSolInstructionDataArgs['lockedAmount'];
  unlockAt: LockSolInstructionDataArgs['unlockAt'];
};

export function getLockSolInstruction<
  TAccountUser extends string,
  TAccountVaultPda extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TIMELOCK_PROGRAM_ADDRESS,
>(
  input: LockSolInput<
    TAccountUser,
    TAccountVaultPda,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): LockSolInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountVaultPda,
  TAccountVault,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TIMELOCK_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    vaultPda: { value: input.vaultPda ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.vaultPda),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getLockSolInstructionDataEncoder().encode(
      args as LockSolInstructionDataArgs
    ),
  } as LockSolInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountVaultPda,
    TAccountVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedLockSolInstruction<
  TProgram extends string = typeof TIMELOCK_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    vaultPda: TAccountMetas[1];
    vault: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: LockSolInstructionData;
};

export function parseLockSolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedLockSolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      vaultPda: getNextAccount(),
      vault: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getLockSolInstructionDataDecoder().decode(instruction.data),
  };
}
