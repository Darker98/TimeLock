/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const VAULT_P_D_A_DISCRIMINATOR = new Uint8Array([
  109, 182, 77, 81, 208, 30, 110, 107,
]);

export function getVaultPDADiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(VAULT_P_D_A_DISCRIMINATOR);
}

export type VaultPDA = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
  lockedAmount: bigint;
  unlockAt: bigint;
  bump: number;
  vaultBump: number;
};

export type VaultPDAArgs = {
  seed: number | bigint;
  lockedAmount: number | bigint;
  unlockAt: number | bigint;
  bump: number;
  vaultBump: number;
};

export function getVaultPDAEncoder(): FixedSizeEncoder<VaultPDAArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU64Encoder()],
      ['lockedAmount', getU64Encoder()],
      ['unlockAt', getI64Encoder()],
      ['bump', getU8Encoder()],
      ['vaultBump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VAULT_P_D_A_DISCRIMINATOR })
  );
}

export function getVaultPDADecoder(): FixedSizeDecoder<VaultPDA> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU64Decoder()],
    ['lockedAmount', getU64Decoder()],
    ['unlockAt', getI64Decoder()],
    ['bump', getU8Decoder()],
    ['vaultBump', getU8Decoder()],
  ]);
}

export function getVaultPDACodec(): FixedSizeCodec<VaultPDAArgs, VaultPDA> {
  return combineCodec(getVaultPDAEncoder(), getVaultPDADecoder());
}

export function decodeVaultPDA<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VaultPDA, TAddress>;
export function decodeVaultPDA<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VaultPDA, TAddress>;
export function decodeVaultPDA<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<VaultPDA, TAddress> | MaybeAccount<VaultPDA, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVaultPDADecoder()
  );
}

export async function fetchVaultPDA<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VaultPDA, TAddress>> {
  const maybeAccount = await fetchMaybeVaultPDA(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVaultPDA<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VaultPDA, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVaultPDA(maybeAccount);
}

export async function fetchAllVaultPDA(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VaultPDA>[]> {
  const maybeAccounts = await fetchAllMaybeVaultPDA(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVaultPDA(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VaultPDA>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVaultPDA(maybeAccount));
}

export function getVaultPDASize(): number {
  return 34;
}
