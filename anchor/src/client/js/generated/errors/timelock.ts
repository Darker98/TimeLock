/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { TIMELOCK_PROGRAM_ADDRESS } from '../programs';

/** UnlockTimestampInPast: Unlock timestamp cannot be in the past */
export const TIMELOCK_ERROR__UNLOCK_TIMESTAMP_IN_PAST = 0x1770; // 6000
/** UnlockTimeNotReached: Unlock time not reached yet */
export const TIMELOCK_ERROR__UNLOCK_TIME_NOT_REACHED = 0x1771; // 6001
/** SolAmountNotMatching: Disparity in locked amount and amount held in vault */
export const TIMELOCK_ERROR__SOL_AMOUNT_NOT_MATCHING = 0x1772; // 6002
/** LockingZeroSolError: Cannot lock zero SOL */
export const TIMELOCK_ERROR__LOCKING_ZERO_SOL_ERROR = 0x1773; // 6003

export type TimelockError =
  | typeof TIMELOCK_ERROR__LOCKING_ZERO_SOL_ERROR
  | typeof TIMELOCK_ERROR__SOL_AMOUNT_NOT_MATCHING
  | typeof TIMELOCK_ERROR__UNLOCK_TIME_NOT_REACHED
  | typeof TIMELOCK_ERROR__UNLOCK_TIMESTAMP_IN_PAST;

let timelockErrorMessages: Record<TimelockError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  timelockErrorMessages = {
    [TIMELOCK_ERROR__LOCKING_ZERO_SOL_ERROR]: `Cannot lock zero SOL`,
    [TIMELOCK_ERROR__SOL_AMOUNT_NOT_MATCHING]: `Disparity in locked amount and amount held in vault`,
    [TIMELOCK_ERROR__UNLOCK_TIME_NOT_REACHED]: `Unlock time not reached yet`,
    [TIMELOCK_ERROR__UNLOCK_TIMESTAMP_IN_PAST]: `Unlock timestamp cannot be in the past`,
  };
}

export function getTimelockErrorMessage(code: TimelockError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (timelockErrorMessages as Record<TimelockError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isTimelockError<TProgramErrorCode extends TimelockError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TIMELOCK_PROGRAM_ADDRESS,
    code
  );
}
